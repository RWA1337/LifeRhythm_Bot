import os
import threading
import random
from datetime import datetime, date
from flask import Flask
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes
)

# ========= НАСТРОЙКИ =========
BOT_TOKEN = os.getenv("BOT_TOKEN")  # на Render в Environment Variables
BOT_NAME = "LifeRhythm Bot"

# ========= ВСПОМОГАТЕЛЬНОЕ =========
def chunk_unique(seq, k):
    """Вернуть k уникальных случайных элементов из последовательности."""
    if k >= len(seq):
        return random.sample(seq, len(seq))
    return random.sample(seq, k)

def format_list(items, title=None, bullet="•"):
    head = f"{title}\n" if title else ""
    return head + "\n".join(f"{bullet} {x}" for x in items)

# ========= ДАННЫЕ: ЙОГА (60+) =========
YOGA_POSES = [
    "Поза горы (Тадасана)", "Поза дерева (Врикшасана)", "Поза кобры (Бхуджангасана)",
    "Поза собаки мордой вниз (Адхо Мукха Шванасана)", "Планка (Кумбхакасана)",
    "Поза ребёнка (Баласана)", "Поза треугольника (Триконасана)", "Поза воина I (Вирабхадрасана I)",
    "Поза воина II (Вирабхадрасана II)", "Поза воина III (Вирабхадрасана III)",
    "Поза полумесяца (Ардха Чандрасана)", "Поза лодки (Навасана)", "Поза моста (Сету Бандха Сарвангасана)",
    "Поза верблюда (Уштрасана)", "Поза бабочки (Баддха Конасана)", "Поза голубя (Эка Пада Раджакапотасана)",
    "Скрутка сидя (Ардха Матсиендрасана)", "Наклон к ногам сидя (Пашчимоттанасана)",
    "Поза кошки (Марджариасана)", "Поза коровы (Битиласана)", "Поза сфинкса", "Поза щенка",
    "Поза ящерицы", "Поза широкой ноги вперёд (Прасарита Падоттанасана)",
    "Поза стула (Уткатасана)", "Поза орла (Гарудасана)", "Поза рыбы (Мацьясана)",
    "Поза героя (Вирасана)", "Поза полулотоса", "Поза скольжения по стене (вариант)",
    "Поза кузнечика (Салабхасана)", "Поза боковой планки (Васиштхасана)", "Поза восьми углов",
    "Поза кузнечика с вариацией", "Поза луны в наклоне", "Поза короля танцоров (Натараджасана)",
    "Поза утки (вариация баланса)", "Поза колена к груди лёжа", "Поза мраморной плиты (вариант планки)",
    "Поза луны сидя", "Поза головы к колену (Джану Ширшасана)", "Поза корзины (Дханурасана)",
    "Поза берёзки (Сарвангасана)", "Поза плуга (Халасана)", "Поза стойки на голове (Ширшасана, продвинутый)",
    "Поза полёт вороны (Бакаасана)", "Поза щука (Навасана вариация)", "Поза отдыха (Шавасана)",
    "Поза ромба (Ваджрасана)", "Поза молота (динамика корпуса)", "Поза боковой лодки",
    "Поза стола", "Поза щуки с поворотом", "Поза полумесяца у стены", "Поза полет вороны боковая",
    "Поза треугольника с захватом", "Поза интенсивной вытяжки (Уттанасана)",
    "Поза пальмы", "Поза кролика (Сасангасана)", "Поза льва (Симхасана)"
]

# ========= ДАННЫЕ: МЕДИТАЦИИ/ДЫХАНИЕ (50+) =========
BREATH_TECHS = [
    "Квадратное дыхание 4–4–4–4", "Дыхание 4–7–8 для засыпания",
    "Глубокое диафрагмальное дыхание", "Альтернативное дыхание через ноздри (Нади Шодхана)",
    "Дыхание «коробочка» 5–5–5–5", "Дыхание 6–3–6 (вариант HRV)",
    "Дыхание по метроному 5 сек вдох / 5 сек выдох", "Сканирование тела с дыханием",
    "Дыхание с визуализацией волны", "Дыхание огня (Капалабхати — осторожно, 20–40 сек)",
    "Дыхание 3–3–6 (удлинённый выдох)", "Осознанные вдохи с подсчётом 1–10",
    "Медитация «3 минуты тишины»", "Медитация «Заземление» (ощущения стоп)",
    "Медитация благодарности (5 предметов)", "Медитация на звук (фокус на окружающих звуках)",
    "Дыхание 5–5 (кохерентность, 5 минут)", "Дыхание по треугольнику 4–4–8",
    "Дыхание коробочкой 6–6–6–6", "Медитация «В теле здесь и сейчас»",
    "Дыхание через губы (pursed-lip) 4–6", "Дыхание по схеме 2–4–6–8",
    "Медитация любви-доброты (метта)", "Медитация «наблюдение за мыслями»",
    "Расслабление мышц по Джекобсону (короткая версия)", "Дыхание 1–4 (успокоение)",
    "Медитация «Счёт выдохов»", "Walking-mindfulness (5–10 минут)", "Звуковое «ом» на выдохе (мягко)",
    "Дышим 3–6 (успокоение перед сном)", "Дыхание 5–7–5", "Визуализация светового шара",
    "Медитация на сердцебиение", "Медитация на дыхании в живот", "Дыхание 4–4–6",
    "Метта + дыхание 5 минут", "3 цикла полного йоговского дыхания", "Дыхание волнорезом 5 минут",
    "Уддияна-бандха мягко (только опытным)", "Брамари (жужжание пчелы, мягко)",
    "Насчитанные 10 выдохов (3 повтора)", "Удлинённый выдох 3×1 минута", "Медитация «Кинестетика рук»",
    "Визуализация безопасного места", "Медитация «Облака мыслей»", "Медитация «Наблюдатель»",
    "Дыхание в квадрате 3–3–3–3", "Когерентное дыхание 6/м", "Медитация «Мягкий взгляд»",
    "Дыхание ~5.5 сек вдох/выдох (HRV)", "Дыхание 2–2–4 (короткое успокоение)"
]

# ========= ДАННЫЕ: ПИТАНИЕ (100+ генеративно) =========
# Базовые советы (фиксированные)
NUTRITION_BASE = [
    "Пейте воду: цель ~30 мл/кг/день", "Добавляйте овощи в каждый приём пищи",
    "Белок в каждом приёме (яйца/рыба/птица/бобовые)", "Снижайте быстрые сахара и сладкие напитки",
    "Цельнозерновые вместо рафинированных", "Клетчатка 20–30 г/сутки (овощи, отруби, бобовые)",
    "Планируйте перекусы (йогурт/творог/орехи/фрукты)", "Соль ≤5 г/сутки",
    "Следите за размером порций (тарелка 50/25/25 — овощи/белок/углеводы)",
    "Ешьте медленно, минимум 15–20 минут на приём", "Добавляйте зелень и травы вместо лишней соли",
    "Ограничивайте трансжиры (фастфуд, готовая выпечка)", "Режим 3–4 приёма/день без «досыпаний» сладким",
    "Завтрак с белком (омлет/творог/греческий йогурт)", "Фрукты 2–3 порции/день",
    "Орехи 20–30 г/день (миндаль/грецкие/фундук)", "Рыба 2 раза/нед (лосось/скумбрия/сардины)",
    "Бобовые 2–3 раза/нед", "Молочные — выбирайте ферментированные (кефир, ряженка)",
    "Чтение этикеток: сахар ≤5 г/100 г, клетчатка ≥6 г/100 г",
    "Пейте чай/кофе без сахара", "Ужин за 2–3 часа до сна", "Сократите алкоголь до минимума",
    "Планируйте меню на 2–3 дня вперёд", "Используйте тарелку поменьше — съедите меньше",
    "Старайтесь готовить дома", "Соблюдайте пищевую гигиену (мытьё рук, хранение)",
    "Добавляйте сезонные овощи/фрукты", "Соблюдайте баланс БЖУ, не демонизируйте продукты",
]

# Генераторы советов (дают десятки дополнительных уникальных подсказок)
PROTEINS = ["курица", "индейка", "яйца", "творог", "лосось", "тунец", "фасоль", "чечевица", "нут"]
CARBS = ["гречка", "овсянка", "бурый рис", "киноа", "цельнозерн. паста", "батат"]
FATS = ["оливковое масло", "авокадо", "миндаль", "грецкие орехи", "семена чиа", "льняное семя"]
VEGGIES = ["брокколи", "шпинат", "морковь", "перец", "огурец", "помидор", "капуста", "свёкла"]
FRUITS = ["яблоко", "банан", "ягоды", "груша", "киви", "апельсин", "грейпфрут"]
COOK = ["запечь", "тушить", "гриль", "на пару", "в духовке", "в мультиварке"]

def generate_nutrition_tips(n=80):
    tips = []
    for _ in range(n):
        p = random.choice(PROTEINS)
        c = random.choice(CARBS)
        v = random.choice(VEGGIES)
        f = random.choice(FATS)
        m = random.choice(COOK)
        tip = f"Соберите тарелку: {p} + {c} + {v}; готовить: {m}; жиры: {f} (1 ст.л.)."
        tips.append(tip)
    return tips

# ========= ДАННЫЕ: АНАЛИЗЫ (80+ распространённых показателей) =========
# Ключи: нижний/верхний референс для взрослого, краткая подсказка (НЕ мед. диагноз!)
ANALYSIS = {
    "гемоглобин": ("м/ж: 130–160 / 120–150 г/л", "Низкий — проверьте железо, рацион; высокий — обезвоживание/курение и пр."),
    "глюкоза": ("3.5–5.5 ммоль/л натощак", "Выше — обсудить с врачом толерантность к глюкозе."),
    "холестерин общий": ("до 5.2 ммоль/л", "Смотрите также ЛПНП/ЛПВП, триглицериды."),
    "ЛПНП": ("до 3.0 ммоль/л", "Чем ниже при рисках ССЗ, тем лучше."),
    "ЛПВП": (">1.0 (м) / >1.2 (ж) ммоль/л", "Выше — обычно лучше."),
    "триглицериды": ("до 1.7 ммоль/л", "Высокие — риски ССЗ, обсудить рацион."),
    "сыв.железо": ("м/ж: 11–30 мкмоль/л", "Низкое — возможен дефицит железа; смотрите ферритин."),
    "ферритин": ("м: 30–400, ж: 15–150 нг/мл", "Низкий — частая причина усталости (дефицит железа)."),
    "витамин D": ("30–100 нг/мл (75–250 нмоль/л)", "Низкий — обсудить добавки с врачом."),
    "B12": ("200–900 пг/мл", "Низкий — слабость/онемение, проверьте питание."),
    "фолиевая кислота": (">3 нг/мл", "Низкий — мегалобластная анемия, питание."),
    "кальций": ("2.15–2.55 ммоль/л", "Оценивайте с альбумином."),
    "магний": ("0.66–1.07 ммоль/л", "Низкий — судороги/усталость."),
    "креатинин": ("м: 62–115, ж: 53–97 мкмоль/л", "См. СКФ для функции почек."),
    "мочевина": ("2.8–7.2 ммоль/л", "Высокая — белковая диета/обезвоживание/почки."),
    "АЛТ": ("до 41 Ед/л", "Повышение — печень, обсудить с врачом."),
    "АСТ": ("до 40 Ед/л", "Смотреть вместе с АЛТ."),
    "ГГТ": ("м: до 60, ж: до 40 Ед/л", "Алкоголь/желчевыводящая система."),
    "ЩФ": ("40–150 Ед/л", "Кости/печень — смотреть контекст."),
    "билирубин общий": ("5–21 мкмоль/л", "Желтуха/печень — к врачу."),
    "общий белок": ("64–83 г/л", "Питание/печень/почки."),
    "альбумин": ("35–50 г/л", "Белковый статус."),
    "лейкоциты": ("4.0–9.0 ×10⁹/л", "Воспаление/инфекция — смотреть формулу."),
    "эритроциты": ("м: 4.3–6.2, ж: 3.8–5.5 ×10¹²/л", "Кислородная функция крови."),
    "тромбоциты": ("150–400 ×10⁹/л", "Свертывание — низкие/высокие к врачу."),
    "СОЭ": ("м: 2–15, ж: 2–20 мм/ч", "Неспецифический маркер воспаления."),
    "ТТГ": ("0.4–4.0 мЕд/л", "Щитовидка: при отклонениях проверяют Т3/Т4."),
    "свТ4": ("9–22 пмоль/л", "Щитовидная железа."),
    "свТ3": ("3–8 пмоль/л", "Щитовидная железа."),
    "инсулин": ("2–25 мкЕд/мл", "Резистентность/углеводный обмен."),
    "HOMA-IR": ("желательно <2.5", "Инсулинорезистентность — к врачу."),
    "СРБ": ("<5 мг/л", "Воспаление (высокочувств.)."),
    "фибриноген": ("2–4 г/л", "Свертывание/воспаление."),
    "D-димер": ("<0.5 мкг/мл FEU", "Тромбоз — оценка с врачом."),
    "витамин B6": ("5–50 нг/мл", "Низкий — питание."),
    "витамин B1": ("2.1–4.3 мкг/дл", "Энергетика/нервная система."),
    "ферритин у женщин": ("15–150 нг/мл", "Дефицит — частая причина слабости."),
    "ОМЕГА-3 индекс": (">8%", "Ниже — добавьте жирную рыбу/омега-3 по согласованию."),
    "цинка": ("11–23 мкмоль/л", "Иммунитет/кожа/волосы."),
    "селен": ("≈100–120 мкг/л", "Антиоксидантная защита."),
    "медь": ("12–25 мкмоль/л", "Баланс с цинком."),
    "калий": ("3.5–5.1 ммоль/л", "Сердце/мышцы."),
    "натрий": ("135–145 ммоль/л", "Вода-соль."),
    "хлор": ("98–107 ммоль/л", "Кислотно-щелочной баланс."),
    "CO2 (бикарбонат)": ("22–29 ммоль/л", "КЩС."),
    "СКФ": (">90 мл/мин/1.73м²", "Функция почек, считать по формулам."),
    "ИМТ": ("18.5–24.9", "Масса тела: <18.5 недостаток, 25–29.9 — избыточная."),
    "окружность талии": ("м<94 см, ж<80 см", "Выше — риск метаболсиндрома."),
    "витамин A": ("0.3–0.8 мг/л", "Дефицит — зрение/кожа."),
    "витамин E": ("5–20 мг/л", "Антиоксидант."),
    "Гликированный гемоглобин (HbA1c)": ("<5.7% (норма)", "5.7–6.4% преддиабет; ≥6.5% диабет (с врачом)."),
    # ... при желании можно расширять дальше аналогично
}

# Синонимы для поиска по /analysis
ANALYSIS_ALIASES = {
    "hb": "гемоглобин",
    "hemoglobin": "гемоглобин",
    "glucose": "глюкоза",
    "chol": "холестерин общий",
    "ldl": "ЛПНП",
    "hdl": "ЛПВП",
    "tg": "триглицериды",
    "vitd": "витамин D",
    "ttg": "ТТГ",
    "tsh": "ТТГ",
    "ft4": "свТ4",
    "ft3": "свТ3",
    "esr": "СОЭ",
    "crp": "СРБ",
    "bmi": "ИМТ",
}

# ========= ДАННЫЕ: УПРАЖНЕНИЯ — ГЕНЕРАТОР (даёт тысячи комбинаций) =========
WARMUPS = [
    "Суставная разминка 3 мин", "Лёгкий бег на месте 2 мин", "Прыжки на месте 30 сек ×2",
    "Круговые движения руками и бёдрами 2 мин", "Скакалка (воображаемая) 1 мин", "Ходьба с высоким подниманием колен 1 мин"
]
MAIN_MOVES = [
    "Приседания 15", "Выпады 12/н", "Отжимания 10", "Планка 40 сек", "Скручивания 20",
    "Берпи 10", "Гиперэкстензия (без опоры) 15", "Ягодичный мост 20", "Приседания с прыжком 10",
    "Отжимания от стены 15", "Планка боковая 20 сек/сторона", "Джампинг Джек 30 сек",
    "Альпинист 30 сек", "Супермен 15", "Русские скрутки 20"
]
FINISHERS = [
    "Планка 60 сек", "Дыхание 4–6 1 мин (снижение пульса)", "Растяжка ног 2 мин", "Растяжка спины 2 мин",
    "Ходьба на месте 2 мин", "Кошка/корова 1 мин", "Шавасана 2 мин"
]

def build_workout():
    warm = random.choice(WARMUPS)
    main = ", ".join(chunk_unique(MAIN_MOVES, 3))
    fin = random.choice(FINISHERS)
    return f"🏃 Разминка: {warm}\n🔥 Основной блок: {main}\n✅ Завершение: {fin}"

# ========= ВОДА/БИОРИТМ (простая логика) =========
WATER_GOAL_ML = 2000

# ========= КОМАНДЫ =========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        f"👋 Привет! Я {BOT_NAME}.\n"
        "Команды:\n"
        "/exercise — 5 случайных комплексов\n"
        "/meditation — 5 техник дыхания/медитации\n"
        "/yoga — 5 поз йоги\n"
        "/nutrition — 10 советов по питанию\n"
        "/analysis [показатель] — краткая справка (напр. /analysis гемоглобин)\n"
        "/analysislist — список популярных показателей\n"
        "/water — учёт воды (+250 мл)\n"
        "/biorhythm — базовая оценка дня\n"
        "/help — справка\n"
    )
    await update.message.reply_text(text)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

# Много выдачи за одно сообщение:
async def exercise(update: Update, context: ContextTypes.DEFAULT_TYPE):
    packs = [build_workout() for _ in range(5)]
    await update.message.reply_text("\n\n".join(packs))

async def meditation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    items = chunk_unique(BREATH_TECHS, 5)
    await update.message.reply_text(format_list(items, "🧘 Дыхание/медитации (выборка):"))

async def yoga(update: Update, context: ContextTypes.DEFAULT_TYPE):
    items = chunk_unique(YOGA_POSES, 5)
    await update.message.reply_text(format_list(items, "🧘 Йога — попробуйте по одной позе:"))

# Питание: фиксированные + сгенерированные
async def nutrition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    generated = generate_nutrition_tips(20)  # каждый раз новые
    fixed = chunk_unique(NUTRITION_BASE, 10)
    tips = fixed + generated
    await update.message.reply_text(format_list(tips, "🥗 Советы по питанию (подборка 30):"))

def _resolve_analysis_key(key: str):
    k = key.strip().lower()
    if k in ANALYSIS:
        return k
    if k in ANALYSIS_ALIASES:
        return ANALYSIS_ALIASES[k]
    # поиск частичным совпадением
    for real in ANALYSIS:
        if k in real:
            return real
    return None

async def analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        key = " ".join(context.args)
        real = _resolve_analysis_key(key)
        if not real:
            await update.message.reply_text("Не нашёл такой показатель. Использование: /analysis гемоглобин\nСписок: /analysislist")
            return
        ref, tip = ANALYSIS[real]
        await update.message.reply_text(f"🧪 {real.capitalize()}\nНорма: {ref}\nПодсказка: {tip}\n\n⚠️ Это не диагноз. Отклонения обсуждайте с врачом.")
    else:
        # если без параметров — показать 5 популярных карточек
        keys = chunk_unique(list(ANALYSIS.keys()), 5)
        blocks = []
        for k in keys:
            ref, tip = ANALYSIS[k]
            blocks.append(f"🧪 {k.capitalize()}\nНорма: {ref}\nПодсказка: {tip}")
        blocks.append("Подсказка: для конкретного показателя — /analysis название (например, /analysis гемоглобин). Полный список: /analysislist")
        await update.message.reply_text("\n\n".join(blocks))

async def analysislist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keys = sorted(list(ANALYSIS.keys()))[:70]  # показываем большую, но не бесконечную выборку
    await update.message.reply_text(format_list(keys, "📚 Популярные показатели (фрагмент):"))

# Учёт воды — простое суммирование на день в RAM (на фри-инстансе хватит)
# Для простоты без БД: словарь {user_id: (date, total_ml)}
water_log = {}

async def water(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    today = date.today()
    total = 0
    if uid in water_log:
        d, val = water_log[uid]
        if d == today:
            total = val
    total += 250
    water_log[uid] = (today, total)
    await update.message.reply_text(f"💧 Отмечено +250 мл. Всего сегодня: {total} мл (цель ~{WATER_GOAL_ML} мл).")

async def biorhythm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # примитивная псевдо-оценка по дате
    day_mod = datetime.utcnow().toordinal() % 5
    verdicts = [
        "Спокойный день — подойдёт для восстановления.",
        "Умеренная активность — держи темп.",
        "Хорошая энергия — можно планировать тренировки.",
        "Пик работоспособности — сложные задачи сегодня!",
        "Бережный режим — больше сна и воды."
    ]
    await update.message.reply_text(f"📈 Биоритм дня: {verdicts[day_mod]}")

# ========= Flask keepalive =========
app_web = Flask(__name__)

@app_web.route("/")
def home():
    return "OK"

@app_web.route("/healthz")
def health():
    return "OK"

def run_flask():
    port = int(os.getenv("PORT", 10000))
    app_web.run(host="0.0.0.0", port=port)

# ========= ЗАПУСК =========
def run_bot():
    token = BOT_TOKEN
    if not token:
        raise RuntimeError("Не найден BOT_TOKEN (Render → Environment → BOT_TOKEN).")
    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("exercise", exercise))
    app.add_handler(CommandHandler("meditation", meditation))
    app.add_handler(CommandHandler("yoga", yoga))
    app.add_handler(CommandHandler("nutrition", nutrition))
    app.add_handler(CommandHandler("analysis", analysis))
    app.add_handler(CommandHandler("analysislist", analysislist))
    app.add_handler(CommandHandler("water", water))
    app.add_handler(CommandHandler("biorhythm", biorhythm))

    app.run_polling()

if __name__ == "__main__":
    # Запускаем Flask для keepalive и бота — параллельно
    threading.Thread(target=run_flask, daemon=True).start()
    run_bot()

