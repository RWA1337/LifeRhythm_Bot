import os
import random
import asyncio
import threading
from datetime import datetime, date
from typing import List, Dict

from flask import Flask, request, jsonify
from telegram import Update
from telegram.ext import (
    Application, ApplicationBuilder,
    CommandHandler, ContextTypes
)

# ==========
# НАСТРОЙКИ
# ==========
BOT_TOKEN = os.getenv("BOT_TOKEN")  # обязателен
if not BOT_TOKEN:
    raise RuntimeError("Не задан BOT_TOKEN в Environment Variables Render.")

# Секрет для URL вебхука, задай что-то своё в Render → Environment → WEBHOOK_SECRET
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "webhook-secret-change-me")

# Публичный URL сервиса. На Render обычно доступна переменная RENDER_EXTERNAL_URL.
PUBLIC_URL = os.getenv("RENDER_EXTERNAL_URL") or os.getenv("BASE_URL")
if not PUBLIC_URL:
    # последняя попытка — угадать сабдомен (можно заменить на свой, если нужно)
    PUBLIC_URL = "https://liferhythm-bot.onrender.com"

# Порт для Flask (Render передаёт через PORT)
PORT = int(os.getenv("PORT", "10000"))

# ===============
# ДАННЫЕ/КОНТЕНТ
# ===============

# Вода: учёт по пользователю и дате (память в процессе; на бесплатном Render не гарантируется постоянство между рестартами)
WATER_STATE: Dict[str, int] = {}  # ключ: f"{user_id}:{YYYY-MM-DD}" -> мл

def day_key(user_id: int) -> str:
    return f"{user_id}:{date.today().isoformat()}"

# Дата рождения для биоритмов (в памяти процесса)
USER_DOB: Dict[int, str] = {}  # user_id -> "DD.MM.YYYY"

# Большие наборы вариантов:

EXERCISES: List[str] = [
    "🏃 Комплекс «Быстрый старт» (7–8 мин):\n1) Прыжки 30с\n2) Приседания 15\n3) Отжимания от стены 10\n4) Планка 30с\n5) Наклоны 15\nПовторить 2 круга.",
    "💪 «Корпус и пресс» (10 мин):\n1) Скручивания 15\n2) Велосипед лёжа 20\n3) Планка 40с\n4) Боковая планка 20с/сторона\n5) Подъёмы таза 15",
    "🦵 «Ноги-домой» (12 мин):\n1) Выпады 10/нога\n2) Приседания 15\n3) Ягодичный мост 15\n4) Стульчик у стены 40с\n5) Растяжка бёдер 30с",
    "🌀 «Спина-осанка» (8–10 мин):\n1) Лодочка 12\n2) Разведения рук лёжа 12\n3) Кошка-корова 30с\n4) Повороты корпуса 20\n5) Растяжка грудного отдела 30с",
    "🔥 «Кардио дома» (10 мин):\n1) Бёрпи (упрощ.) 8\n2) Бег на месте 40с\n3) Прыжки «ноги-врозь» 30с\n4) Высокие колени 30с\n5) Шаги в планке 20",
    "🏋️ «Гантели-лайт» (если есть 2×2–4 кг):\n1) Тяга к поясу 12\n2) Жим стоя 12\n3) Бицепс 12\n4) Трицепс за голову 12\n5) Сумо-присед 15",
    "🧹 «Для офиса» (5 мин):\n1) Круги плечами 20\n2) Сведение лопаток 15\n3) Наклоны в стороны 10/сторона\n4) Полуприсед 15\n5) Потягивания 30с",
    "⚡ «Табата 4×»: 20с работа / 10с отдых:\nКруг: прыжки, отжимания от стола, присед, планка. 4 раунда.",
    "🧗 «Баланс» (8 мин):\n1) Стойка на одной ноге 30с/нога\n2) Полуприсед на одной 6/нога\n3) Планка с подъёмом руки 8/сторона\n4) Ягодичный мост 15",
    "🏃‍♂️ «Разогрев утром» (6 мин):\n1) Махи руками 30с\n2) Шаги с касанием колена 30с\n3) Присед 12\n4) Отжимания от стены 10\n5) Планка 20с",
    "🧠 «Мобилити шея/плечи» (6 мин):\nМедленные круги шеей, наклоны головы, круги плечами, «замок» за спиной, аккуратная растяжка трапеций.",
    "🏠 «Полный круг 15 мин»:\n1) Присед 15\n2) Отжимания 10 (от стола)\n3) Планка 40с\n4) Скручивания 20\n5) Выпады 10/нога — 3 круга.",
    "🔥 «Жиросжигающий» (12–15 мин):\nБёрпи 10, джампинг-джек 40с, присед-прыжок 10, горка (альпинист) 30с, отдых 40с — 3–4 круга.",
    "🧘 «Мягкая зарядка» (7 мин):\nКошка-корова, наклоны вперёд с округлением/распрямлением спины, круги тазом, потягивания, дыхание 1 мин.",
    "🦶 «Икры+ступни»:\nПодъёмы на носки 20, растяжка икр у стены 30с/нога, ходьба на носках 30с, на пятках 30с.",
    "🏃 «HIIT 10 мин» 30/30:\nБег на месте, присед, отжимания от стола, скалолаз, джампинг — 2 круга.",
    "🦵 «Колени-добро»:\nПрисед с упором на стул 12, разгибание колена сидя 12/нога, ягодичный мост 15, растяжка квадрицепса.",
    "💪 «Грудь/трицепс без пола»:\nОтжимания от стены 15–20, жим ладонью о ладонь 10×5с, отжимания от стола 10–12 — 3 круга.",
    "🌀 «Косые мышцы»:\nРусский твист 20, боковая планка 20с/сторона, диагональные скручивания 12/сторона.",
    "🧍 «Осанка+дыхание»:\nСтена: прижать затылок/лопатки/таз — 40с, дыхание 4-4-4 1 мин, сведение лопаток резинкой/без 15.",
    "🦵 «Ягодицы»:\nМост 15, отведение ноги на четвереньках 12/нога, пульсирующий присед 15, растяжка грушевидной.",
    "🏡 «Мини-степпер» (если есть):\nИнтервалы 40с работа / 20с отдых — 10 минут.",
    "🏸 «Скакалка альтернативы»:\nИмитация скакалки 45с, шаги в сторону 45с — 6 раундов (микс).",
    "🥵 «Плечи/спина резинка»:\nТяга резинки к груди 15, наружная ротация 12/сторона, отведение рук стоя 15.",
    "🦵 «Квадрицепс/ягодица»:\nСумо-присед 15, болгарские выпады 8/нога (на диван), шаг в сторону с приседом 10/сторона.",
    "🧎 «Колени/мобилити»:\nКошка-корова, круги коленями, лёгкая растяжка бедра, мобилизация голеностопа.",
    "🧠 «Анти-стресс движение» (6 мин):\nШейные наклоны, мягкие махи руками, встряхивание кистей, диагф.дыхание 2 мин.",
    "⚖️ «Баланс-2»:\nДерево (йога) 30с/нога, полуприсед на одной ноге 6/нога, планка+подъём ноги 8/нога.",
    "🔥 «Метаболик 12 мин»:\n30с работа / 20с отдых: присед, отжимания, скалолаз, выпады, берпи-лайт — 3 круга.",
    "🧘 «Растяжка на весь корпус» (10 мин):\nЗадняя линия, квадрицепс, сгибатели бедра, грудной отдел, шея — по 30–40с.",
]

MEDITATIONS: List[str] = [
    "💨 Дыхание 4–4–4 (бокс): вдох 4с — пауза 4с — выдох 4с. 6–10 циклов.",
    "🫁 4–7–8: вдох 4с — держим 7с — выдох 8с. 4–6 циклов, медленно.",
    "📦 5–5 (кохерентное): 5с вдох — 5с выдох, без пауз. 3–5 минут.",
    "🌊 Волна: медленный вдох носом, выдох длиннее на 1–2с, представляй волну. 5 минут.",
    "🧘 Сканирование тела: закрыть глаза, от стоп к макушке отмечать ощущения. 5–10 минут.",
    "🔁 Нос/рот: вдох носом 3–4с, выдох ртом 5–6с, расслабляя плечи. 3–6 минут.",
    "👃 Альтернативная ноздря (Нади Шодхана):\nБольшой палец закрывает правую ноздрю — вдох левой; Безымянный закрывает левую — выдох правой; затем наоборот. 3–5 минут.",
    "🫧 Шёпотный выдох (удджайи-лайт): слегка сужай горло при выдохе, «морской» звук. 2–4 минуты.",
    "🧮 Счёт до 10: вдох — 1, выдох — 2 … до 10; затем снова. 3–7 минут.",
    "🪷 Любящая доброта: на вдохе «да буду я спокоен», на выдохе «пусть другие будут спокойны». 3–5 минут.",
    "🪁 Квадраты внимания: отмечай 4 точки дыхательного цикла — вдох/пауза/выдох/пауза. 4 минуты.",
    "🔇 Резонансное дыхание ~6 в мин: 5с вдох — 5с выдох. 5–10 минут.",
    "🧊 Охлаждающее дыхание (ситали): свёрнутый «трубочкой» язык — вдох через него, выдох носом. 1–3 минуты.",
    "🔥 Разогревающий капалабхати (лайт): серии коротких выдохов через нос, вдохи пассивные. 3×30 выдохов (мягко!).",
    "🎯 Фокус у кончика носа: ощущай прохладу вдоха и тёплота выдоха. 3–5 минут.",
    "🕯️ Визуализация свечи: ровный вдох/выдох, будто поддерживаешь пламя. 3–6 минут.",
    "🌿 3–4–5: вдох 3с — пауза 4с — выдох 5с. 6–10 циклов.",
    "🎵 Слушание звуков: не оценивай, лишь замечай, возвращайся к дыханию. 5–8 минут.",
    "🛏️ Перед сном: 4–7–8 + «тяжёлые веки» — расслабь тело по сегментам. 5 мин.",
    "🧍 Осознанное стояние: мягкое дыхание + ощущение стоп/центра тяжести. 3–5 мин.",
    "🪑 60 секунд паузы: 1 мин медленного дыхания 5–6/5–6, отпусти плечи и челюсть.",
    "🫀 Дыхание сердцем (образ): представляй вдох через область сердца, выдох — тепло по телу.",
    "🌬️ Продлённый выдох: вдох 3–4с, выдох 2× дольше. Успокаивает. 3–6 мин.",
    "🧘 Этикетка эмоций: замечай эмоцию, называй её («тревога», «злость»), возвращайся к дыханию.",
    "🌙 1:2 (сон): вдох 3, выдох 6 — 5 минут в кровати.",
    "🪞 Осознанность в зеркале: 10 ровных циклов дыхания, смотри на мягкое выражение лица.",
    "🖐️ «5-4-3-2-1»: назови 5 вижу, 4 слышу, 3 ощущаю, 2 запаха, 1 вкус — дыша спокойно.",
    "🌲 Визуализация леса: дыши 5/5, представляй аромат хвои, прохладу тени. 5–8 мин.",
    "🧳 «Отпустить»: на выдохе проговаривай внутрь «отпускаю». 3–5 минут.",
]

YOGA: List[str] = [
    "🧘‍♂️ Тадасана (Поза горы): встань прямо, стопы вместе/на ширине таза, макушка вверх, лопатки вниз, 5–8 дыханий.",
    "🌿 Врикшасана (Дерево): стопа к внутреннему бедру/голени, таз ровно, ладони у груди/вверх, 5–8 дыханий/нога.",
    "🏹 Вирабхадрасана II (Воин II): длинная стойка, колено над пяткой, руки врозь, взгляд вперёд, 5–8 дыханий/сторона.",
    "🏹 Вирабхадрасана I (Воин I): задняя стопа под углом, таз вперёд, руки вверх, 5–8 дыханий/сторона.",
    "🦅 Гарудасана (Орел – упрощ.): скрести руки/ноги, сядь чуть ниже, держи баланс 5–6 дыханий.",
    "🐈 Кошка‑Корова: на вдох — прогиб, на выдох — округление, 8–10 циклов.",
    "🪷 Баласана (Ребёнок): сядь на пятки, лоб на коврик, руки вперёд/вдоль, 6–10 дыханий.",
    "🧗 Адхо Мукха Шванасана (Собака мордой вниз): толкай ладони, таз вверх, шея длинная, 5–8 дыханий.",
    "🪑 Уткатасана (Стул): таз назад, колени не уходят за носки, корпус слегка вперёд, 5–8 дыханий.",
    "🌧️ Уттанасана (Наклон стоя): мягко вытягивай заднюю линию, колени можно подсогнуть, 6–10 дыханий.",
    "🌀 Паривритта Триконасана (Переверн. треугольник – упрощ.): опора рукой на голень/блок, вытяжение, 5 дыханий/сторона.",
    "🧎 Ануруттха (низкий выпад): колено на полу, таз вперёд, вытяжение сгибателей бедра, 6 дыханий/сторона.",
    "🐦 Голубь (вариант): передняя голень диагонально, таз ровно, опора на подушку, 6–8 дыханий/сторона.",
    "🪁 Баддха Конасана (Бабочка): стопы вместе, колени в стороны, вытяжение, 8–10 дыханий.",
    "🪞 Супта Матсиендрасана (Перекрут лёжа): колено на бок, плечи прижаты, 6–8 дыханий/сторона.",
    "🫁 Шавасана (Расслабление): лёжа, дыхание ровное, сканируй тело 3–5 мин.",
    "🦵 Паршваконасана (Боковой угол – упр.): предплечье на бедре, рука вверх, 5–8 дыханий/сторона.",
    "🧱 Триконасана (Треугольник – упр.): рука на голень/блок, грудь разворачивай, 6 дыханий/сторона.",
    "🧍 Випарита Карани (ноги на стене): таз на полу/подушке, ноги на стене, 3–7 минут.",
    "🤸‍♂️ Полумост (сету бандха – упр.): подъём таза лёжа, зафиксируй, 5–6 дыханий, 2–3 раза.",
    "🧵 Нить в иголку: из четверенек рука под грудью, плечо на коврик, 6 дыханий/сторона.",
    "🧘‍♀️ Пашчимоттанасана (наклон сидя – упр.): колени можно согнуть, вытяжение спины, 6–10 дыханий.",
    "🫱 Планка на локтях (йога-стиль): макушка вперёд, пятки назад, 20–40с ×2.",
    "🧎 Кошка с вытяжением руки/ноги: диагональ рука‑нога, держать 4–5 дыханий/сторона.",
    "🧘‍♂️ Сукхасана (удобная поза): сидя, ровная спина, дыхание 5 мин.",
    "🪴 Маласана (гирлянда – упр.): присед, пятки на опоре, локтями разводи колени, 5–6 дыханий.",
    "🪢 Гомукхасана (руки – упр.): ремешок/полотенце, мягкое вытяжение плеч, 6 дыханий.",
    "🦋 Вариации «бабочки» лёжа: стопы вместе, колени в стороны, опора под колени, 3–5 мин.",
]

NUTRITION: List[str] = [
    "🥤 Старт дня с воды: 300–400 мл комнатной температуры сразу после пробуждения.",
    "🍽️ Правило «тарелки»: 1/2 овощи, 1/4 белок, 1/4 сложные углеводы.",
    "🥦 Овощи 400–600 г/день: добавляй к каждому приёму пищи.",
    "🍗 Белок: 1–1,2 г/кг массы/сутки (общий ориентир; корректируй под себя).",
    "🍚 Углеводы — преимущественно цельные: крупы, бобовые, цельнозерновой хлеб.",
    "🫒 Жиры — полезные: оливковое, орехи, авокадо; ограничивай транс‑жиры.",
    "🍭 Сахар: держи добавленный < 25–30 г/день. Смотри этикетки.",
    "🥤 Напитки: вода, несладкий чай/кофе; соки — как десерт, а не как вода.",
    "⏱️ Интервалы: ешь регулярно, избегай бесконечных перекусов «по чуть‑чуть».",
    "🥣 Завтрак: белок+клетчатка (омлет/творог + овощи/овсянка).",
    "🧂 Соль: старайся ≤5 г/сутки (около 1 ч. л. со всеми продуктами).",
    "🥬 Клетчатка 25–35 г/день: овощи, цельные зёрна, бобовые, ягоды, семена.",
    "🍶 Кисломолочные: йогурт без сахара/кефир 150–250 мл в день по переносимости.",
    "🥗 План: заготовь 2–3 базы (крупа/бобовые/курица) на 2–3 дня вперёд.",
    "🍫 Десерт: 2–3 раза/нед по 20–30 г тёмного шоколада 70%+ вместо ежедневных сладостей.",
    "🍽️ Осознанность: ешь без экрана, медленно, останавливайся на 80% сытости.",
    "🍏 Перекус умный: яблоко + орехи/йогурт, морковь + хумус, творог + ягоды.",
    "🧃 Этикетки: чем короче состав — тем лучше. Смотри сахар/соль/транс‑жиры.",
    "🥔 Гликемическая нагрузка: сочетай углеводы с белком/жиром/клетчаткой.",
    "🍲 Супы/рагу: помогают набрать клетчатку/объем с меньшей калорийностью.",
    "🫘 Белок из бобовых 2–4 раза/нед: чечевица, нут, фасоль.",
    "🐟 Рыба 2 раза/нед: особенно жирная (лосось, скумбрия, сельдь).",
    "🥚 Яйца 3–7 шт/нед (по индивидуальной переносимости и рекомендациям врача).",
    "🍌 Калий/магний из пищи: бананы, зелень, бобовые, орехи, какао.",
    "🥤 Алкоголь — по возможности исключи; минимум — очень умеренно и не ежедневно.",
    "🍽️ Объём порций: используй меньшую тарелку, добавку бери только после паузы 10 мин.",
    "🌙 Ужин за 2–3 часа до сна, лёгкий: белок + овощи + немного углеводов.",
    "🌶️ Специи: куркума, имбирь, корица — вкус + возможная польза, если подходят.",
    "🥗 Заправки: оливковое + лимон/йогурт вместо майонеза.",
    "🚰 Вода: ориентир 30 мл/кг/сут (чистая + напитки), корректируй по самочувствию.",
    "🧊 Напитки с сахарозаменителями — ограниченно, следи за реакцией.",
    "🥜 Орехи 20–30 г/день: миндаль/грецкий/фундук, без сахара/глазури.",
    "🍠 Крахмалистые овощи — норм! Просто учитывай порции: 100–150 г за раз.",
    "🧊 Заморозка овощей/ягод — ок, удобно и полезно.",
    "🧃 «Фреши» — это еда, а не вода: маленькая порция и не каждый день.",
    "🥤 Кофе: 1–3 чашки/день без сахара, не поздно вечером.",
    "🍽️ Вегетарианцам: контролируй B12/железо/йод/омега‑3 по врачу.",
    "🧂 Маринады/соусы: ищи низкое содержание сахара/соли.",
    "🥗 Салат = не только овощи: добавь белок/орехи/семена/цельнозерно.",
    "🍳 Термообработка: чередуй — сырые/тушёные/запечённые овощи.",
    "🍱 Контейнеры: готовь порциями и бери с собой, чтобы не срываться.",
    "🧪 Индивидуальные ограничения — только по показаниям и вместе с врачом.",
    "🧊 Лёд/газировка без сахара — как инструмент «переесть не дать» (если подходит).",
    "🍋 Стакан тёплой воды с лимоном — вкусно, но не «жиросжигание»; пей по желанию.",
]

ANALYSIS: Dict[str, str] = {
    "hemoglobin": "Гемоглобин (Hgb). Пример нормы (взрослые): ♂ 130–170 г/л, ♀ 120–150 г/л. Ниже — риск анемии; выше — обезвоживание/курение/гипоксия и др. Интерпретировать с врачом.",
    "ferritin": "Ферритин. Ориентиры: ~30–400 нг/мл (♂), ~15–150 нг/мл (♀). Низко — дефицит железа; высоко — воспаление/перегрузка железом. Всегда смотреть вместе с OZHSS, сыворот. железом, CRP.",
    "vitamin_d": "Витамин D (25(OH)D): <20 нг/мл — дефицит; 20–30 — недостаток; 30–50 — оптимум (часто); >100 — риск токсичности. Корректировать с врачом.",
    "b12": "Витамин B12: ~200–950 пг/мл. Низко — риск анемии/невролог. симптомов. Оценивать с гомоцистеином/ММА.",
    "folate": "Фолат (B9): ~4–20 нг/мл. Низко — мегалобластная анемия, питание.",
    "glucose": "Глюкоза натощак: 3.9–5.5 ммоль/л (общие ориентиры). 5.6–6.9 — преддиабет (IFG), ≥7.0 — возможен диабет. Подтверждать повторно.",
    "hba1c": "HbA1c: <5.7% норма; 5.7–6.4% преддиабет; ≥6.5% диабет (диагноз — врачу).",
    "alt_ast": "АЛТ/АСТ: примерно до 35–40 Ед/л (зависит от лаборатории). Выше — возможны проблемы печени/мышц; смотреть ГГТ/ЩФ/билирубин.",
    "ggt": "ГГТ: часто до ~60 Ед/л (лабораторно зависит). Рост — алкоголь, холестаз, лекарства и др.",
    "alk_phos": "ЩФ: ориентир ~30–120 Ед/л (разнится). Рост — кости/желчные пути; оценивать контекст.",
    "bilirubin": "Билирубин общий: ~5–21 мкмоль/л. Рост — гемолиз/печень/желчные пути. Фракции: прямой/непрямой.",
    "creatinine": "Креатинин + eGFR. Нормы зависят от пола/мышц. Важно считать eGFR для оценки функции почек.",
    "urea": "Мочевина: ориентир ~2.5–8.3 ммоль/л. Рост — белок/дегидратация/почки; низко — печень/низкий белок.",
    "uric_acid": "Мочевая кислота: ♂ ~210–420, ♀ ~150–360 мкмоль/л. Рост — риск подагры/МетаС; корректировать рацион и обсуждать с врачом.",
    "lipids": "Липиды: ОХС, ЛПНП, ЛПВП, ТГ. Цели индивидуальны. Часто: ЛПНП как можно ниже при рисках; ЛПВП выше лучше; ТГ <1.7 ммоль/л.",
    "crp": "CRP высокой чувствительности: <1 мг/л — низкий риск; 1–3 — умеренный; >3 — высокий (кардиориск). Остро возрастает при воспалении.",
    "tsh": "ТТГ: ориентиры ~0.4–4.0 мЕд/л; учитывать FT4/FT3, жалобы. Беременность — другие референсы.",
    "ft4": "Св. T4: интервал зависит от лаборатории. Важно смотреть вместе с ТТГ.",
    "iron": "Железо сывороточное + OZHSS/ферритин — только вместе. По одиночке малоинформативно.",
    "magnesium": "Магний: ориентиры ~0.66–1.07 ммоль/л (зависит от лаб.). Симптомы важнее цифр, обсуждать с врачом.",
    "calcium": "Кальций общий/иониз.: учитывать альбумин. Важно при остеопорозе/ПТГ/дефицитах.",
    "potassium": "Калий ~3.5–5.1 ммоль/л. Отклонения требуют внимания (сердце/почки/лекарства).",
    "sodium": "Натрий ~135–145 ммоль/л. Изменения — чаще вода/гормоны/почки.",
    "platelets": "Тромбоциты ~150–400×10^9/л. Низко/высоко — к врачу, смотреть клинику.",
    "wbc": "Лейкоциты ~4–10×10^9/л. Вверх — воспаление/инфекция/стресс; вниз — вирус/кроветворение/препараты. Консультация врача.",
    "rbc": "Эритроциты/гематокрит: оценка кислородопереноса и гидратации. С врачом.",
}

# ---------------
# ПОЛЕЗНЫЕ УТИЛЫ
# ---------------
async def reply_long(update: Update, text: str):
    """Отправка длинных текстов частями <4096 символов."""
    chunk = 3500
    for i in range(0, len(text), chunk):
        await update.message.reply_text(text[i:i+chunk])

def pick(items: List[str], k: int = 1) -> List[str]:
    k = max(1, min(k, len(items)))
    return random.sample(items, k)

def parse_int_arg(args: List[str], default: int) -> int:
    if not args:
        return default
    try:
        val = int(args[0])
        return max(1, val)
    except:
        return default

# -------------
# HANDLERS
# -------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "👋 Привет! Я LifeRhythmBot.\n"
        "Команды: /menu — все разделы, /help — помощь."
    )

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "📋 Основные команды:\n"
        "/menu — меню с разделами\n"
        "/water [мл] — учёт воды (+250 мл по умолчанию)\n"
        "/water_reset — обнулить воду за сегодня\n"
        "/exercise [n] — комплексы тренировок\n"
        "/meditation [n] — дыхательные практики/медитации\n"
        "/yoga [n] — позы/связки йоги\n"
        "/nutrition [n] — советы по питанию\n"
        "/analysis <название> — краткая справка (напр. /analysis ferritin)\n"
        "/setdob DD.MM.YYYY — дата рождения\n"
        "/biorhythm — расчёт биоритмов (после /setdob)\n"
        "Подставь число после команды, чтобы получить несколько вариантов (напр. /exercise 5)."
    )

async def cmd_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "📦 Разделы:\n"
        "• /water, /water_reset — учёт воды\n"
        "• /exercise [n] — тренировки (много вариантов)\n"
        "• /meditation [n] — дыхание/медитация\n"
        "• /yoga [n] — позы/связки\n"
        "• /nutrition [n] — питание/советы\n"
        "• /analysis <анализ> — краткая справка\n"
        "• /setdob DD.MM.YYYY → /biorhythm"
    )

async def cmd_water(update: Update, context: ContextTypes.DEFAULT_TYPE):
    amount = 250
    if context.args:
        try:
            amount = max(50, min(1000, int(context.args[0])))
        except:
            pass
    key = day_key(update.effective_user.id)
    total = WATER_STATE.get(key, 0) + amount
    WATER_STATE[key] = total
    await update.message.reply_text(f"💧 +{amount} мл. Всего сегодня: {total} мл.")

async def cmd_water_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = day_key(update.effective_user.id)
    WATER_STATE.pop(key, None)
    await update.message.reply_text("🔁 Учёт воды за сегодня обнулён.")

async def cmd_exercise(update: Update, context: ContextTypes.DEFAULT_TYPE):
    n = parse_int_arg(context.args, 3)
    items = pick(EXERCISES, n)
    await reply_long(update, "🏃 Тренировки:\n\n" + "\n\n".join(items))

async def cmd_meditation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    n = parse_int_arg(context.args, 3)
    items = pick(MEDITATIONS, n)
    await reply_long(update, "🧘 Медитации/дыхание:\n\n" + "\n\n".join(items))

async def cmd_yoga(update: Update, context: ContextTypes.DEFAULT_TYPE):
    n = parse_int_arg(context.args, 3)
    items = pick(YOGA, n)
    await reply_long(update, "🧘‍♀️ Йога:\n\n" + "\n\n".join(items))

async def cmd_nutrition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    n = parse_int_arg(context.args, 5)
    items = pick(NUTRITION, n)
    await reply_long(update, "🥗 Питание:\n\n" + "\n\n".join(items))

async def cmd_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "Использование: /analysis <название>\n"
            "Доступно: " + ", ".join(sorted(ANALYSIS.keys()))
        )
        return
    key = context.args[0].lower()
    info = ANALYSIS.get(key)
    if not info:
        await update.message.reply_text(
            "Не знаю такой анализ. Попробуй:\n" + ", ".join(sorted(ANALYSIS.keys()))
        )
        return
    await reply_long(update, f"🧪 {key}:\n{info}\n\n⚠️ Справка носит общий характер и не заменяет консультацию врача.")

async def cmd_setdob(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("Формат: /setdob DD.MM.YYYY (например, /setdob 14.02.1990)")
        return
    dob = context.args[0]
    try:
        datetime.strptime(dob, "%d.%m.%Y")
        USER_DOB[update.effective_user.id] = dob
        await update.message.reply_text(f"✅ Дата рождения сохранена: {dob}")
    except:
        await update.message.reply_text("Неверный формат. Нужен DD.MM.YYYY")

def _biorhythm_calc(birth: date, target: date) -> Dict[str, int]:
    # Классическая упрощённая модель: физический 23д, эмоциональный 28д, интеллектуальный 33д
    days = (target - birth).days
    import math
    def wave(period):
        return int(round( (math.sin(2*math.pi*days/period)) * 100 ))
    return {
        "physical": wave(23),
        "emotional": wave(28),
        "intellectual": wave(33),
    }

async def cmd_biorhythm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dob = USER_DOB.get(update.effective_user.id)
    if not dob:
        await update.message.reply_text("Сначала задай дату рождения: /setdob DD.MM.YYYY")
        return
    bdate = datetime.strptime(dob, "%d.%m.%Y").date()
    today = date.today()
    br = _biorhythm_calc(bdate, today)
    await update.message.reply_text(
        f"📊 Биоритмы на {today.strftime('%d.%m.%Y')}:\n"
        f"Физический: {br['physical']}%\n"
        f"Эмоциональный: {br['emotional']}%\n"
        f"Интеллектуальный: {br['intellectual']}%\n"
        f"Это игрушечная модель для мотивации, не медицина 🙂"
    )

# ================
# TELEGRAM + FLASK
# ================
application: Application = ApplicationBuilder().token(BOT_TOKEN).build()

# Регистрируем команды
application.add_handler(CommandHandler("start", cmd_start))
application.add_handler(CommandHandler("help", cmd_help))
application.add_handler(CommandHandler("menu", cmd_menu))
application.add_handler(CommandHandler("water", cmd_water))
application.add_handler(CommandHandler("water_reset", cmd_water_reset))
application.add_handler(CommandHandler("exercise", cmd_exercise))
application.add_handler(CommandHandler("meditation", cmd_meditation))
application.add_handler(CommandHandler("yoga", cmd_yoga))
application.add_handler(CommandHandler("nutrition", cmd_nutrition))
application.add_handler(CommandHandler("analysis", cmd_analysis))
application.add_handler(CommandHandler("setdob", cmd_setdob))
application.add_handler(CommandHandler("biorhythm", cmd_biorhythm))

flask_app = Flask(__name__)

PTB_LOOP = None  # сюда сохраним event loop PTB

@flask_app.get("/")
def root():
    return "LifeRhythmBot is alive."

@flask_app.get("/healthz")
def health():
    return jsonify(ok=True, time=datetime.utcnow().isoformat())

@flask_app.get("/setwebhook")
def set_webhook_http():
    # Ручная установка вебхука (на всякий случай)
    url = f"{PUBLIC_URL}/webhook/{WEBHOOK_SECRET}"
    fut = asyncio.run_coroutine_threadsafe(
        application.bot.set_webhook(
            url=url,
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        ),
        PTB_LOOP
    )
    result = fut.result(timeout=20)
    return jsonify(set=True, url=url, result=result)

@flask_app.post(f"/webhook/{WEBHOOK_SECRET}")
def telegram_webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    # Отдаём апдейты PTB в его event loop
    asyncio.run_coroutine_threadsafe(application.process_update(update), PTB_LOOP)
    return "OK"

async def ptb_main():
    # Инициализация PTB в своём event loop
    await application.initialize()
    await application.start()

    # Ставим вебхук автоматически
    url = f"{PUBLIC_URL}/webhook/{WEBHOOK_SECRET}"
    await application.bot.set_webhook(
        url=url,
        drop_pending_updates=True,
        allowed_updates=Update.ALL_TYPES
    )

    # Держим цикл живым
    await asyncio.Event().wait()

def run_ptb_loop():
    global PTB_LOOP
    PTB_LOOP = asyncio.new_event_loop()
    asyncio.set_event_loop(PTB_LOOP)
    PTB_LOOP.run_until_complete(ptb_main())

def run_flask():
    flask_app.run(host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    # 1) Запускаем PTB (вебхуки) в отдельном треде/loop
    threading.Thread(target=run_ptb_loop, daemon=True).start()
    # 2) Поднимаем Flask (Render видит порт → «сервис жив»)
    run_flask()
