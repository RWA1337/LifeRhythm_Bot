import os
import threading
from datetime import datetime
from flask import Flask
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, CallbackQueryHandler
)

BOT_TOKEN = os.getenv("BOT_TOKEN")

# ---- Telegram bot ----
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìÖ –ë–∏–æ—Ä–∏—Ç–º—ã", callback_data="biorhythm")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –±–∏–æ—Ä–∏—Ç–º–æ–≤ –∏ –ø–æ–º–æ—â–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–Ω—è üöÄ\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "biorhythm":
        await query.edit_message_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    elif query.data == "about":
        await query.edit_message_text("‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∏–æ—Ä–∏—Ç–º—ã –ø–æ –≤–∞—à–µ–π –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è.\n–ê–≤—Ç–æ—Ä: @–≤–∞—à_–Ω–∏–∫")
    elif query.data == "help":
        await query.edit_message_text("‚ùì –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, –∏ —è —Å–∫–∞–∂—É –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –±–∏–æ—Ä–∏—Ç–º—ã!")

async def handle_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        bday = datetime.strptime(update.message.text.strip(), "%d.%m.%Y")
        days_lived = (datetime.now() - bday).days
        physical = round((days_lived % 23) / 23 * 100, 1)
        emotional = round((days_lived % 28) / 28 * 100, 1)
        intellectual = round((days_lived % 33) / 33 * 100, 1)
        await update.message.reply_text(
            f"üìä –í–∞—à–∏ –±–∏–æ—Ä–∏—Ç–º—ã —Å–µ–≥–æ–¥–Ω—è:\n"
            f"üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–π: {physical}%\n"
            f"üíñ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π: {emotional}%\n"
            f"üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π: {intellectual}%"
        )
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

app_telegram = ApplicationBuilder().token(BOT_TOKEN).build()
app_telegram.add_handler(CommandHandler("start", start))
app_telegram.add_handler(CallbackQueryHandler(button_click))
app_telegram.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_date))

# ---- Flask server ----
app_web = Flask(__name__)

@app_web.route("/")
def home():
    return "Bot is alive!"

def run_flask():
    port = int(os.getenv("PORT", 5000))
    app_web.run(host="0.0.0.0", port=port)

# ---- –ó–∞–ø—É—Å–∫ ----
if __name__ == "__main__":
    threading.Thread(target=run_flask).start()
    app_telegram.run_polling()

