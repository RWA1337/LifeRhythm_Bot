import os
import random
import threading
from flask import Flask
from telegram.ext import ApplicationBuilder, CommandHandler
from telegram import Update
from telegram.ext import ContextTypes

BOT_TOKEN = os.getenv("BOT_TOKEN")

# ======== –ö–æ–º–∞–Ω–¥—ã ========

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç LifeRhythm.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/nutrition ‚Äî —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n"
        "/exercise ‚Äî —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
        "/meditation ‚Äî –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏\n"
        "/yoga ‚Äî –ø–æ–∑—ã –π–æ–≥–∏\n"
        "/analysis <–∞–Ω–∞–ª–∏–∑> ‚Äî —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤\n"
        "/water ‚Äî –æ—Ç–º–µ—Ç–∫–∞ –≤–æ–¥—ã\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/about ‚Äî –æ–±–æ –º–Ω–µ"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚Ñπ –ü–æ–º–æ—â—å:\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "/nutrition\n"
        "/exercise\n"
        "/meditation\n"
        "/yoga\n"
        "/analysis hemoglobin"
    )

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ LifeRhythm Bot ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è.\n"
        "–î–∞—é —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º, –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ –≤–æ–¥–Ω–æ–º—É –±–∞–ª–∞–Ω—Å—É."
    )

async def nutrition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tips = [
        "ü•ó –ï—à—å –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤ ‚Äî –º–∏–Ω–∏–º—É–º 400 –≥ –≤ –¥–µ–Ω—å.",
        "üíß –ü–µ–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã ‚Äî –æ–∫–æ–ª–æ 2 –ª –≤ –¥–µ–Ω—å.",
        "üç≥ –ó–∞–≤—Ç—Ä–∞–∫–∞–π –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è.",
        "ü•ú –î–æ–±–∞–≤–ª—è–π –≤ —Ä–∞—Ü–∏–æ–Ω –æ—Ä–µ—Ö–∏ –∏ –±–æ–±–æ–≤—ã–µ.",
        "üçã –ù–∞—á–Ω–∏ —É—Ç—Ä–æ —Å–æ —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã —Å –ª–∏–º–æ–Ω–æ–º."
    ]
    await update.message.reply_text(random.choice(tips))

async def exercise(update: Update, context: ContextTypes.DEFAULT_TYPE):
    workouts = [
        "üèÉ –ö–æ–º–ø–ª–µ–∫—Å ‚Äî –∑–∞—Ä—è–¥–∫–∞:\n1. –ü—Ä—ã–∂–∫–∏ 30 —Å–µ–∫\n2. –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è 15 —Ä–∞–∑\n3. –û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç —Å—Ç–µ–Ω—ã 10\n4. –ü–ª–∞–Ω–∫–∞ 30 —Å–µ–∫",
        "üí™ –ö–æ—Ä–æ—Ç–∫–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n1. –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è 20 —Ä–∞–∑\n2. –í—ã–ø–∞–¥—ã 10 –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É\n3. –û—Ç–∂–∏–º–∞–Ω–∏—è 10 —Ä–∞–∑\n4. –ü–ª–∞–Ω–∫–∞ 40 —Å–µ–∫",
        "ü§∏ –õ—ë–≥–∫–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞:\n1. –ö—Ä—É–≥–æ–≤—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–ª–æ–≤–æ–π\n2. –†–∞—Å—Ç—è–∂–∫–∞ —Ä—É–∫ –∏ –Ω–æ–≥\n3. –ù–∞–∫–ª–æ–Ω—ã –≤–ø–µ—Ä—ë–¥ 10 —Ä–∞–∑"
    ]
    await update.message.reply_text(random.choice(workouts))

async def meditation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    practices = [
        "üí® –î—ã—Ö–∞–Ω–∏–µ 4-4-4:\n–í–¥–æ—Ö 4 —Å–µ–∫ ‚Äî –ó–∞–¥–µ—Ä–∂–∫–∞ 4 —Å–µ–∫ ‚Äî –í—ã–¥–æ—Ö 4 —Å–µ–∫. –ü–æ–≤—Ç–æ—Ä–∏ 6‚Äì8 —Ü–∏–∫–ª–æ–≤.",
        "üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–∞ –¥—ã—Ö–∞–Ω–∏–∏:\n–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –≤–¥–æ—Ö–∞—Ö –∏ –≤—ã–¥–æ—Ö–∞—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.",
        "üåä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:\n–ü—Ä–µ–¥—Å—Ç–∞–≤—å –º–æ—Ä–µ –∏ –∑–≤—É–∫ –≤–æ–ª–Ω, —Ä–∞—Å—Å–ª–∞–±–ª—è—è—Å—å 3‚Äì5 –º–∏–Ω—É—Ç."
    ]
    await update.message.reply_text(random.choice(practices))

async def yoga(update: Update, context: ContextTypes.DEFAULT_TYPE):
    poses = [
        "üßò‚Äç‚ôÇÔ∏è –ü–æ–∑–∞ –≥–æ—Ä—ã (–¢–∞–¥–∞—Å–∞–Ω–∞) ‚Äî –≤—ã–ø—Ä—è–º—å—Å—è, –Ω–æ–≥–∏ –≤–º–µ—Å—Ç–µ, —Ä—É–∫–∏ –≤–≤–µ—Ä—Ö.",
        "ü¶ã –ü–æ–∑–∞ –±–∞–±–æ—á–∫–∏ ‚Äî —Å—è–¥—å, —Å–æ–µ–¥–∏–Ω—è—è —Å—Ç–æ–ø—ã, –∫–æ–ª–µ–Ω–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—ã.",
        "üåø –ü–æ–∑–∞ –¥–µ—Ä–µ–≤–∞ ‚Äî –≤—Å—Ç–∞–Ω—å –Ω–∞ –æ–¥–Ω—É –Ω–æ–≥—É, –≤—Ç–æ—Ä—É—é —É–ø—Ä–∏ –≤ –±–µ–¥—Ä–æ, —Ä—É–∫–∏ –≤–≤–µ—Ä—Ö.",
        "üêç –ü–æ–∑–∞ –∫–æ–±—Ä—ã ‚Äî –ª—ë–∂–∞ –Ω–∞ –∂–∏–≤–æ—Ç–µ, –ø–æ–¥–Ω–∏–º–∏ –≥—Ä—É–¥—å, —Ä—É–∫–∏ –ø–æ–¥ –ø–ª–µ—á–∞–º–∏."
    ]
    await update.message.reply_text(random.choice(poses))

# –•—Ä–∞–Ω–∏–º –≤–æ–¥—É –≤ –ø–∞–º—è—Ç–∏
user_water = {}

async def water(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    amount = 250  # –º–ª
    user_water[user_id] = user_water.get(user_id, 0) + amount
    await update.message.reply_text(
        f"üíß –û—Ç–º–µ—á–µ–Ω–æ {amount} –º–ª. –í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: {user_water[user_id]} –º–ª (—Ü–µ–ª—å ~2000 –º–ª)."
    )

async def analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /analysis <–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å>")
        return
    param = context.args[0].lower()
    if param == "hemoglobin":
        await update.message.reply_text("üìä –ì–µ–º–æ–≥–ª–æ–±–∏–Ω: –Ω–æ—Ä–º–∞ 120‚Äì160 –≥/–ª –¥–ª—è –∂–µ–Ω—â–∏–Ω, 130‚Äì170 –≥/–ª –¥–ª—è –º—É–∂—á–∏–Ω.")
    elif param == "glucose":
        await update.message.reply_text("üìä –ì–ª—é–∫–æ–∑–∞: –Ω–æ—Ä–º–∞ 3.5‚Äì5.5 –º–º–æ–ª—å/–ª –Ω–∞—Ç–æ—â–∞–∫.")
    else:
        await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å.")

# ======== Flask —Å–µ—Ä–≤–µ—Ä ========

app_web = Flask(__name__)

@app_web.route("/")
def home():
    return "Bot is alive!"

def run_flask():
    port = int(os.getenv("PORT", 5000))
    app_web.run(host="0.0.0.0", port=port)

# ======== –ó–∞–ø—É—Å–∫ Telegram ========

if __name__ == "__main__":
    app_telegram = ApplicationBuilder().token(BOT_TOKEN).build()

    app_telegram.add_handler(CommandHandler("start", start))
    app_telegram.add_handler(CommandHandler("help", help_command))
    app_telegram.add_handler(CommandHandler("about", about))
    app_telegram.add_handler(CommandHandler("nutrition", nutrition))
    app_telegram.add_handler(CommandHandler("exercise", exercise))
    app_telegram.add_handler(CommandHandler("meditation", meditation))
    app_telegram.add_handler(CommandHandler("yoga", yoga))
    app_telegram.add_handler(CommandHandler("water", water))
    app_telegram.add_handler(CommandHandler("analysis", analysis))

    threading.Thread(target=run_flask).start()
    app_telegram.run_polling()
