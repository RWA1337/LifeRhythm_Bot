import os
import random
import threading
import math
import datetime
from flask import Flask
from telegram.ext import ApplicationBuilder, CommandHandler
from telegram import Update
from telegram.ext import ContextTypes
from config import BOT_TOKEN, PORT

# --- –î–∞–Ω–Ω—ã–µ ---
exercises = [
    "üèÉ –ö–æ–º–ø–ª–µ–∫—Å ‚Äî –∑–∞—Ä—è–¥–∫–∞:\n1. –ü—Ä—ã–∂–∫–∏ 30 —Å–µ–∫\n2. –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è 15 —Ä–∞–∑\n3. –û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç —Å—Ç–µ–Ω—ã 10\n4. –ü–ª–∞–Ω–∫–∞ 30 —Å–µ–∫",
    "üí™ –£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞–∑–º–∏–Ω–∫–∞:\n1. –ú–∞—Ö–∏ —Ä—É–∫–∞–º–∏ 20 —Ä–∞–∑\n2. –ù–∞–∫–ª–æ–Ω—ã 15 —Ä–∞–∑\n3. –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è 10 —Ä–∞–∑\n4. –õ—ë–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ 2 –º–∏–Ω"
]

breathing = [
    "üí® –î—ã—Ö–∞–Ω–∏–µ 4-4-4:\n–í–¥–æ—Ö 4 —Å–µ–∫ ‚Äî –ó–∞–¥–µ—Ä–∂–∫–∞ 4 —Å–µ–∫ ‚Äî –í—ã–¥–æ—Ö 4 —Å–µ–∫. –ü–æ–≤—Ç–æ—Ä–∏ 6‚Äì8 —Ü–∏–∫–ª–æ–≤.",
    "üå¨Ô∏è –î—ã—Ö–∞–Ω–∏–µ 4-7-8:\n–í–¥–æ—Ö 4 —Å–µ–∫ ‚Äî –ó–∞–¥–µ—Ä–∂–∫–∞ 7 —Å–µ–∫ ‚Äî –í—ã–¥–æ—Ö 8 —Å–µ–∫. 3‚Äì4 –ø–æ–≤—Ç–æ—Ä–∞ –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è."
]

yoga_poses = [
    "üßò –ü–æ–∑–∞ –≥–æ—Ä—ã (–¢–∞–¥–∞—Å–∞–Ω–∞) ‚Äî 1 –º–∏–Ω, –∑–∞—Ç–µ–º –Ω–∞–∫–ª–æ–Ω –≤–ø–µ—Ä—ë–¥.",
    "üßò –ü–æ–∑–∞ —Ä–µ–±—ë–Ω–∫–∞ (–ë–∞–ª–∞—Å–∞–Ω–∞) ‚Äî 2‚Äì3 –º–∏–Ω –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è —Å–ø–∏–Ω—ã."
]

nutrition_tips = [
    "ü•ó –°—ä–µ—à—å —Å–µ–≥–æ–¥–Ω—è —Ç–∞—Ä–µ–ª–∫—É –æ–≤–æ—â–µ–π –∏ –±–µ–ª–æ–∫ (–∫—É—Ä–∏—Ü–∞, —Ä—ã–±–∞ –∏–ª–∏ –±–æ–±–æ–≤—ã–µ).",
    "üçé –ü–µ—Ä–µ–∫—É—Å ‚Äî —è–±–ª–æ–∫–æ –∏ –≥–æ—Ä—Å—Ç—å –æ—Ä–µ—Ö–æ–≤ –≤–º–µ—Å—Ç–æ —Å–ª–∞–¥–∫–æ–≥–æ."
]

# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ ---
water_intake = {}

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø LifeRhythm Bot üöÄ\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/exercise ‚Äî —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
        "/meditation ‚Äî –¥—ã—Ö–∞–Ω–∏–µ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏—è\n"
        "/yoga ‚Äî –π–æ–≥–∞\n"
        "/nutrition ‚Äî —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n"
        "/water ‚Äî —É—á—ë—Ç –≤–æ–¥—ã\n"
        "/analysis <–∞–Ω–∞–ª–∏–∑> ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–Ω–∞–ª–∏–∑—É\n"
        "/biorhythm <–î–î.–ú–ú.–ì–ì–ì–ì> ‚Äî –±–∏–æ—Ä–∏—Ç–º—ã"
    )

async def exercise(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(exercises))

async def meditation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(breathing))

async def yoga(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(yoga_poses))

async def nutrition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(nutrition_tips))

async def water(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    water_intake[user_id] = water_intake.get(user_id, 0) + 250
    await update.message.reply_text(f"üíß –û—Ç–º–µ—á–µ–Ω–æ 250 –º–ª. –í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: {water_intake[user_id]} –º–ª (—Ü–µ–ª—å ~2000 –º–ª).")

async def analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /analysis hemoglobin")
        return
    param = context.args[0].lower()
    reference = {
        "hemoglobin": "–ì–µ–º–æ–≥–ª–æ–±–∏–Ω: –Ω–æ—Ä–º–∞ 120-160 –≥/–ª —É –∂–µ–Ω—â–∏–Ω, 130-170 –≥/–ª —É –º—É–∂—á–∏–Ω.",
        "glucose": "–ì–ª—é–∫–æ–∑–∞: –Ω–æ—Ä–º–∞ 3.9-5.5 –º–º–æ–ª—å/–ª –Ω–∞—Ç–æ—â–∞–∫."
    }
    await update.message.reply_text(reference.get(param, "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É."))

async def biorhythm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /biorhythm –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    try:
        birth_date = datetime.datetime.strptime(context.args[0], "%d.%m.%Y")
        today = datetime.datetime.now()
        days_alive = (today - birth_date).days
        physical = math.sin(2 * math.pi * days_alive / 23) * 100
        emotional = math.sin(2 * math.pi * days_alive / 28) * 100
        intellectual = math.sin(2 * math.pi * days_alive / 33) * 100
        await update.message.reply_text(
            f"üìä –ë–∏–æ—Ä–∏—Ç–º—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
            f"–§–∏–∑–∏—á–µ—Å–∫–∏–π: {physical:.1f}%\n"
            f"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π: {emotional:.1f}%\n"
            f"–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π: {intellectual:.1f}%"
        )
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –î–î.–ú–ú.–ì–ì–ì–ì.")

# --- Flask ---
app_web = Flask(__name__)

@app_web.route("/")
def home():
    return "Bot is alive!"

def run_flask():
    app_web.run(host="0.0.0.0", port=PORT)

# --- –ó–∞–ø—É—Å–∫ ---
def run_bot():
    app_telegram = ApplicationBuilder().token(BOT_TOKEN).build()
    app_telegram.add_handler(CommandHandler("start", start))
    app_telegram.add_handler(CommandHandler("exercise", exercise))
    app_telegram.add_handler(CommandHandler("meditation", meditation))
    app_telegram.add_handler(CommandHandler("yoga", yoga))
    app_telegram.add_handler(CommandHandler("nutrition", nutrition))
    app_telegram.add_handler(CommandHandler("water", water))
    app_telegram.add_handler(CommandHandler("analysis", analysis))
    app_telegram.add_handler(CommandHandler("biorhythm", biorhythm))
    app_telegram.run_polling()

if __name__ == "__main__":
    threading.Thread(target=run_flask).start()
    run_bot()

    threading.Thread(target=run_flask).start()
    app_telegram.run_polling()

